// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol";
import "@openzeppelin/contracts/access/Ownable2Step.sol";

/**
 * @title MPERproxy
 * @dev 支持分阶段治理的透明代理合约
 * 
 * 架构说明：
 * 1. 代理合约本身不可升级，保持地址永久不变
 * 2. 逻辑合约可通过升级函数更换
 * 3. 管理员权限可转移给更复杂的治理合约
 */
contract MPERproxyOLD is ERC1967Proxy, Ownable2Step {
    /**
     * @dev 初始化代理
     * @param logic 逻辑合约地址
     * @param admin 初始管理员
     * @param data 初始化调用数据
     */
    constructor(
        address logic,
        address admin,
        bytes memory data
    ) ERC1967Proxy(logic, data) {
        _transferOwnership(admin);
    }

    /**
     * @dev 升级逻辑合约
     * @param newImplementation 新逻辑合约地址
     */
    function upgradeTo(address newImplementation) external onlyOwner {
        _upgradeTo(newImplementation);
    }

    /**
     * @dev 带调用的升级
     * @param newImplementation 新逻辑合约地址
     * @param data 初始化数据
     */
    function upgradeToAndCall(
        address newImplementation,
        bytes memory data
    ) external payable onlyOwner {
        _upgradeToAndCall(newImplementation, data, true);
    }

    /**
     * @dev 获取当前实现地址
     */
    function implementation() external view returns (address) {
        return _implementation();
    }
}